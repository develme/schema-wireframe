<?php namespace DevelMe\Console;

use Illuminate\Console\AppNamespaceDetectorTrait;
use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;

class SchemaAppMakeCommand extends Command {

    use AppNamespaceDetectorTrait;

    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'make:schema-app';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create new controller, view, route, and model based on MySQL\'s information_schema';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function fire()
    {
        $model_name = $this->parseName($this->argument('model'));
        $controller_name = $this->argument('controller');
        $table_name = $this->getTableName($model_name);
        $simple_name = str_singular($table_name);
        $routes_file = $this->laravel->basePath() . '/app/Http/routes.php';
        $theme_name = $this->option('theme');

        $this->info('Creating Model...');
        \Artisan::call('make:schema-model', ['name' => $model_name, '--table' => $table_name, '--quiet' => '']);
        $this->info('Creating View...');
        \Artisan::call('make:schema-view', ['name' => $model_name, '--table' => $table_name, '--theme' => $theme_name, '--quiet' => '']);
        $this->info('Creating Controller...');
        \Artisan::call('make:schema-controller', ['name' => $controller_name, '--table' => $table_name, '--model' => $model_name, '--quiet' => '']);

        if ($this->confirm('Would you like to update the routes.php file as well? [yes|no]', false)) {
            $auto_brand = "// Autogenerated Resource Route\nRoute::resource('$simple_name', '$controller_name');\n";
            file_put_contents($routes_file, "\n\n$auto_brand", FILE_APPEND);
        }

        $this->info('Schema App successfully created.');
    }

    /**
     * Parse the name and format according to the root namespace.
     *
     * @param  string  $name
     * @return string
     */
    protected function parseName($name)
    {
        $rootNamespace = $this->getAppNamespace();

        if (starts_with($name, $rootNamespace))
        {
            return $name;
        }

        return $this->parseName($this->getDefaultNamespace(trim($rootNamespace, '\\')).'\\'.$name);
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace;
    }

    /**
     * Get the console command arguments.
     *
     * @return array
     */
    protected function getArguments()
    {
        return [
            ['model', InputArgument::REQUIRED, 'The model for the controller and views, with namespacing if desired.'],
            ['controller', InputArgument::REQUIRED, 'The name of the controller, with namespacing if desired.'],
        ];
    }

    /**
     * Get Table Name
     *
     * @author Verron Knowles <Verron.Knowles@develme.com>
     * @return string
     */
    protected function getTableName($name)
    {
        $opt_table = $this->input->getOption('table');

        return $opt_table ?: strtolower(str_plural(class_basename($name)));
    }

    /**
     * Get the console command options.
     *
     * @return array
     */
    protected function getOptions()
    {
        return array(
            array('table', null, InputOption::VALUE_REQUIRED, 'The name of the table'),
			array('theme', null, InputOption::VALUE_OPTIONAL, 'The theme for the view [bootstrap|foundation|custom]'),
        );
    }

}
